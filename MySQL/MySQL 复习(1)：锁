# MySQL 复习笔记(1): 锁

有一点 MySQL 的使用经验都应该知道 MySQL 中的锁，如表锁、行锁、间隙锁，还有什么乐观锁、悲观锁、共享锁、排他锁、意向锁等等。
虽然知道这方面的知识，但是有些知识长时间不用也有一点忘记了。

上面说了好多种锁，是按照不同分类来定义的，某种锁即可能是行锁，也可能是排他锁，或悲观锁。

如果按照锁粒度来区分锁的话，可以大致分成两种：
- 表锁：一种粒度很大的锁，会将整个数据表加锁，因此很容易发生锁冲突，并发度很低，但是加锁开销小，加锁较快；
- 行锁：较小粒度的锁，对表中某一行记录进行加锁，开销比较大，不容易发生锁冲突，但是会出现死锁情况

如果按照锁的类型来区分，又可以分成共享锁和排他锁：

**共享锁**

又称为读锁、S 锁，该记录被加 S 锁后，事务未提交之前，其他事务只能读取，而不能修改（所以又被称为读锁），不过不影响其他事务在该记录加 S 锁（所以称为共享锁）；但是，不能加排他锁。

加入 S 锁后，其他事务不能修改该记录，不是因为 S 锁禁止修改，而是因为 update、delete 等修改操作需要在记录上加入排他锁，而不同事务添加 X 锁必须建立在本身没有锁的前提下。

主动加 S 锁的命令是 `lock in share mode`，如下：

```sql
SELECT * FROM `test` WHERE id = 1 LOCK IN SHARE MODE;
```

**排它锁**

又被称为写锁、X 锁、独占锁，被加锁后，其他事务不允许获取到锁，且其他锁在加锁事务提交之前不能修改记录。

update、delete 会对记录加 X 锁，主动加锁使用`for update`命令，如下：

```sql
SELECT * FROM `test` WHERE id = 1 FOR UPDATE
```

~~排他锁和共享锁都是属于行锁，如果在名称之前加一个 **意向** 前缀，那就是属于表锁了。~~

排他锁和共享锁既有行级锁，也有表级锁，使用

```sql
LOCK TABLE `test` READ; 
```

添加表级共享锁，使用

```sql
LOCK TABLE `test` WRITE; 
```

添加表级排他锁。而意向锁确实属于表锁，下面开始介绍意向锁。

**意向锁**

意向锁是一种特殊的锁，用户不能主动操作该锁，而是由系统进行添加，分成两种**意向共享锁 IS **和**意向排它锁 IX **，当需要对记录添加 S 锁时，InnoDB 会先尝试添加 IS 锁；当需要对记录添加 X 锁时，InnoDB 会尝试给表添加 IX 锁。需要注意的是 IS 和 IX 互相兼容，也就是说表被加 IS 锁后同时可以添加 IX 锁（所以多个事务可以同时操作一个表），但是~~不与表级 S、X 锁兼容~~（IS 与 表级 S 兼容）。

添加意向锁的作用是当需要添加表级 X 或 S 锁时，不用扫描表的每一行去检测是否有行级 X 或 S 锁。

**乐观锁**

乐观锁与悲观锁是两种不同的加锁理念，顾名思义，乐观锁认为在一切执行过程中不会产生并发问题，只在提交时判断结果是否符合预期。

乐观锁的关键在于提交时的校验，通常使用版本号来做校验，也可以是时间戳。

例如，a、b 两个请求，a 先执行、b 后执行，两个请求都要写 redis ，且是同一个 key ，根据正常逻辑，b 请求后发，所以 redis 的值应该以 b 为准，这时就可以在写 redis 时，要先获取该 key 的值，判断时间戳是否小于当前时间，是的话正常写入同时加上当前时间戳，否则就放弃本次写入（注意使用 lua 保证命令的原子化）。

在数据库使用乐观锁采用版本号实现，给数据表冗余一个 `version` 字段，每次 update 时判断是否等于更新前的 version，是则更新成功且 version 加 1，否则更新失败，如下：

```sql
SELECT id,num,version FROM `test` WHERE id=10;
UPDATE `test` SET num=10,version = version+1 WHERE id=10 AND version = 0;
```

**悲观锁**

悲观锁认为操作过程中一定会发生并发冲突，所以为了保证本身数据一致性，我要独占该记录，只有我操作完毕才允许其他事务进行。X 锁就是一种典型的悲观锁。

下面来说说 InnoDB 的三种不同的行锁，Gap Lock、Record Lock 和 Next-key Lock。

**Gap Lock**

Gap Lock 间隙锁，该锁会锁定一个范围的记录，但不包括记录本身，

**Record Lock**

Record Lock 记录锁，锁定一条记录

**Next-key Lock**

间隙所与记录锁的结合，锁定一整个范围的记录













